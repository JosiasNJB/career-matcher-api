// <auto-generated />
using System;
using CareerMatcherAPI.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CareerMatcherAPI.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250311021537_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CandidatoConcurso", b =>
                {
                    b.Property<Guid>("CandidatosConcursoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcursosCandidatoId")
                        .HasColumnType("uuid");

                    b.HasKey("CandidatosConcursoId", "ConcursosCandidatoId");

                    b.HasIndex("ConcursosCandidatoId");

                    b.ToTable("CandidatoConcurso");
                });

            modelBuilder.Entity("CandidatoProfissao", b =>
                {
                    b.Property<Guid>("ProfissaoCandidatosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfissoesId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfissaoCandidatosId", "ProfissoesId");

                    b.HasIndex("ProfissoesId");

                    b.ToTable("CandidatoProfissao");
                });

            modelBuilder.Entity("CareerMatcherAPI.Domain.Entities.Candidato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataNascimento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Candidatos");
                });

            modelBuilder.Entity("CareerMatcherAPI.Domain.Entities.Concurso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CodConcurso")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Edital")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Orgao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Concursos");
                });

            modelBuilder.Entity("CareerMatcherAPI.Domain.Entities.Profissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NomeProfissao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Profissoes");
                });

            modelBuilder.Entity("ConcursoProfissao", b =>
                {
                    b.Property<Guid>("ConcursoVagasId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VagaConcursosId")
                        .HasColumnType("uuid");

                    b.HasKey("ConcursoVagasId", "VagaConcursosId");

                    b.HasIndex("VagaConcursosId");

                    b.ToTable("ConcursoProfissao");
                });

            modelBuilder.Entity("CandidatoConcurso", b =>
                {
                    b.HasOne("CareerMatcherAPI.Domain.Entities.Candidato", null)
                        .WithMany()
                        .HasForeignKey("CandidatosConcursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMatcherAPI.Domain.Entities.Concurso", null)
                        .WithMany()
                        .HasForeignKey("ConcursosCandidatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandidatoProfissao", b =>
                {
                    b.HasOne("CareerMatcherAPI.Domain.Entities.Candidato", null)
                        .WithMany()
                        .HasForeignKey("ProfissaoCandidatosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMatcherAPI.Domain.Entities.Profissao", null)
                        .WithMany()
                        .HasForeignKey("ProfissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcursoProfissao", b =>
                {
                    b.HasOne("CareerMatcherAPI.Domain.Entities.Profissao", null)
                        .WithMany()
                        .HasForeignKey("ConcursoVagasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerMatcherAPI.Domain.Entities.Concurso", null)
                        .WithMany()
                        .HasForeignKey("VagaConcursosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
